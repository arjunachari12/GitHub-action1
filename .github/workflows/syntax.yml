name: Full CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 2 * * 1"  # Runs every Monday at 2 AM UTC
  workflow_dispatch:  # Allows manual execution

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]  # Run tests on multiple Node.js versions

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test

      - name: Upload Test Report
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: reports/

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test  # Run build only after test job succeeds

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Build Project
        run: npm run build

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: dist/

  deploy:
    name: Deploy to AWS S3
    runs-on: ubuntu-latest
    needs: build  # Deploy only after build job succeeds

    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: dist/

      - name: Deploy to AWS S3
        run: aws s3 sync dist/ s3://${{ secrets.S3_BUCKET }} --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: deploy  # Notify only after deployment succeeds
    if: success()

    steps:
      - name: Send Slack Notification
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"ðŸš€ Deployment Successful!"}' ${{ secrets.SLACK_WEBHOOK }}
